using Godot;

public class Game : Node2D
{
    /// Called when the node enters the scene tree for the first time.
    public override void _Ready()
    {
        WOLF3D.DownloadSharewareWOLF3D.Main();

        Image image = new Image();
        image.CreateFromData(16, 16, false, Image.Format.Rgba8, Int2ByteArray(palette));
        ImageTexture it = new ImageTexture();
        it.CreateFromImage(image);

        Sprite sprite = new Sprite
        {
            Name = "Sprite1",
            Texture = it,
            Position = new Vector2(100, 100)
        };
        AddChild(sprite);
    }

    // Called every frame. 'delta' is the elapsed time since the previous frame.
    //  public override void _Process(float delta)
    //  {
    //      
    //  }

    public static byte[] Int2ByteArray(int[] ints)
    {
        byte[] bytes = new byte[ints.Length * 4];
        for (int i = 0; i < ints.Length; i++)
        {
            bytes[i * 4] = (byte)(ints[i] >> 24);
            bytes[i * 4 + 1] = (byte)(ints[i] >> 16);
            bytes[i * 4 + 2] = (byte)(ints[i] >> 8);
            bytes[i * 4 + 3] = (byte)(ints[i]);
        }
        return bytes;
    }

    public static readonly int[] palette = {
        0x000000FF, 0x00002AFF, 0x002A00FF, 0x002A2AFF, 0x2A0000FF, 0x2A002AFF, 0x2A1500FF, 0x2A2A2AFF,
        0x151515FF, 0x15153FFF, 0x153F15FF, 0x153F3FFF, 0x3F1515FF, 0x3F153FFF, 0x3F3F15FF, 0x3F3F3FFF,
        0x3B3B3BFF, 0x373737FF, 0x343434FF, 0x303030FF, 0x2D2D2DFF, 0x2A2A2AFF, 0x262626FF, 0x232323FF,
        0x1F1F1FFF, 0x1C1C1CFF, 0x191919FF, 0x151515FF, 0x121212FF, 0x0E0E0EFF, 0x0B0B0BFF, 0x080808FF,
        0x3F0000FF, 0x3B0000FF, 0x380000FF, 0x350000FF, 0x320000FF, 0x2F0000FF, 0x2C0000FF, 0x290000FF,
        0x260000FF, 0x220000FF, 0x1F0000FF, 0x1C0000FF, 0x190000FF, 0x160000FF, 0x130000FF, 0x100000FF,
        0x3F3636FF, 0x3F2E2EFF, 0x3F2727FF, 0x3F1F1FFF, 0x3F1717FF, 0x3F1010FF, 0x3F0808FF, 0x3F0000FF,
        0x3F2A17FF, 0x3F2610FF, 0x3F2208FF, 0x3F1E00FF, 0x391B00FF, 0x331800FF, 0x2D1500FF, 0x271300FF,
        0x3F3F36FF, 0x3F3F2EFF, 0x3F3F27FF, 0x3F3F1FFF, 0x3F3E17FF, 0x3F3D10FF, 0x3F3D08FF, 0x3F3D00FF,
        0x393600FF, 0x333100FF, 0x2D2B00FF, 0x272700FF, 0x212100FF, 0x1C1B00FF, 0x161500FF, 0x101000FF,
        0x343F17FF, 0x313F10FF, 0x2D3F08FF, 0x283F00FF, 0x243900FF, 0x203300FF, 0x1D2D00FF, 0x182700FF,
        0x363F36FF, 0x2F3F2EFF, 0x273F27FF, 0x203F1FFF, 0x183F17FF, 0x103F10FF, 0x083F08FF, 0x003F00FF,
        0x003F00FF, 0x003B00FF, 0x003800FF, 0x003500FF, 0x013200FF, 0x012F00FF, 0x012C00FF, 0x012900FF,
        0x012600FF, 0x012200FF, 0x011F00FF, 0x011C00FF, 0x011900FF, 0x011600FF, 0x011300FF, 0x011000FF,
        0x363F3FFF, 0x2E3F3FFF, 0x273F3FFF, 0x1F3F3EFF, 0x173F3FFF, 0x103F3FFF, 0x083F3FFF, 0x003F3FFF,
        0x003939FF, 0x003333FF, 0x002D2DFF, 0x002727FF, 0x002121FF, 0x001C1CFF, 0x001616FF, 0x001010FF,
        0x172F3FFF, 0x102C3FFF, 0x082A3FFF, 0x00273FFF, 0x002339FF, 0x001F33FF, 0x001B2DFF, 0x001727FF,
        0x36363FFF, 0x2E2F3FFF, 0x27273FFF, 0x1F203FFF, 0x17183FFF, 0x10103FFF, 0x08093FFF, 0x00013FFF,
        0x00003FFF, 0x00003BFF, 0x000038FF, 0x000035FF, 0x000032FF, 0x00002FFF, 0x00002CFF, 0x000029FF,
        0x000026FF, 0x000022FF, 0x00001FFF, 0x00001CFF, 0x000019FF, 0x000016FF, 0x000013FF, 0x000010FF,
        0x0A0A0AFF, 0x3F380DFF, 0x3F3509FF, 0x3F3306FF, 0x3F3002FF, 0x3F2D00FF, 0x2D083FFF, 0x2A003FFF,
        0x260039FF, 0x200033FF, 0x1D002DFF, 0x180027FF, 0x140021FF, 0x11001CFF, 0x0D0016FF, 0x0A0010FF,
        0x3F363FFF, 0x3F2E3FFF, 0x3F273FFF, 0x3F1F3FFF, 0x3F173FFF, 0x3F103FFF, 0x3F083FFF, 0x3F003FFF,
        0x380039FF, 0x320033FF, 0x2D002DFF, 0x270027FF, 0x210021FF, 0x1B001CFF, 0x160016FF, 0x100010FF,
        0x3F3A37FF, 0x3F3834FF, 0x3F3631FF, 0x3F352FFF, 0x3F332CFF, 0x3F3129FF, 0x3F2F27FF, 0x3F2E24FF,
        0x3F2C20FF, 0x3F291CFF, 0x3F2718FF, 0x3C2517FF, 0x3A2316FF, 0x372215FF, 0x342014FF, 0x321F13FF,
        0x2F1E12FF, 0x2D1C11FF, 0x2A1A10FF, 0x28190FFF, 0x27180EFF, 0x24170DFF, 0x22160CFF, 0x20140BFF,
        0x1D130AFF, 0x1B1209FF, 0x171008FF, 0x150F07FF, 0x120E06FF, 0x100C06FF, 0x0E0B05FF, 0x0A0803FF,
        0x180019FF, 0x001919FF, 0x001818FF, 0x000007FF, 0x00000BFF, 0x0C0904FF, 0x120012FF, 0x140014FF,
        0x00000DFF, 0x070707FF, 0x131313FF, 0x171717FF, 0x101010FF, 0x0C0C0CFF, 0x0D0D0DFF, 0x363D3DFF,
        0x2E3A3AFF, 0x273737FF, 0x1D3232FF, 0x123030FF, 0x082D2DFF, 0x082C2CFF, 0x002929FF, 0x002626FF,
        0x002323FF, 0x002121FF, 0x001F1FFF, 0x001E1EFF, 0x001D1DFF, 0x001C1CFF, 0x001B1BFF, 0x260022FF
    };
}
