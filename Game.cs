using Godot;

public class Game : Node2D
{
    /// Called when the node enters the scene tree for the first time.
    public override void _Ready()
    {
        WOLF3D.DownloadSharewareWOLF3D.Main();

        Godot.Image image = new Image();
        image.CreateFromData(16, 16, false, Image.Format.Rgba8, Palette());
        ImageTexture it = new ImageTexture();
        it.CreateFromImage(image, 0);

        Sprite sprite = new Sprite
        {
            Name = "Sprite1",
            Texture = it,
            Position = new Vector2(200, 200),
            Scale = new Vector2(20, 20)
        };
        AddChild(sprite);
    }

    // Called every frame. 'delta' is the elapsed time since the previous frame.
    //  public override void _Process(float delta)
    //  {
    //      
    //  }

    public static byte[] Index2ByteArray(byte[] index)
    {
        byte[] bytes = new byte[index.Length * 4];
        for (int i = 0; i < index.Length; i++)
        {
            bytes[i * 4] = (byte)(palette[index[i]] >> 14);
            bytes[i * 4 + 1] = (byte)(palette[index[i]] >> 6);
            bytes[i * 4 + 2] = (byte)(palette[index[i]] << 2);
            bytes[i * 4 + 3] = index[i] < 255 ? (byte)255 : (byte)0;
        }
        return bytes;
    }

    /// <returns>A byte array of the palette, ready to make a 16x16 image.</returns>
    public static byte[] Palette()
    {
        byte[] bytes = Int2ByteArray(palette);
        bytes[bytes.Length-1] = 0;
        return bytes;
    }

    public static byte[] Int2ByteArray(int[] ints)
    {
        byte[] bytes = new byte[ints.Length * 4];
        for (int i = 0; i < ints.Length; i++)
        {
            bytes[i * 4] = (byte)(ints[i] >> 14);
            bytes[i * 4 + 1] = (byte)(ints[i] >> 6);
            bytes[i * 4 + 2] = (byte)(ints[i] << 2);
            bytes[i * 4 + 3] = 255;
        }
        return bytes;
    }

    public static readonly int[] palette = {
        0x000000, 0x00002A, 0x002A00, 0x002A2A, 0x2A0000, 0x2A002A, 0x2A1500, 0x2A2A2A,
        0x151515, 0x15153F, 0x153F15, 0x153F3F, 0x3F1515, 0x3F153F, 0x3F3F15, 0x3F3F3F,
        0x3B3B3B, 0x373737, 0x343434, 0x303030, 0x2D2D2D, 0x2A2A2A, 0x262626, 0x232323,
        0x1F1F1F, 0x1C1C1C, 0x191919, 0x151515, 0x121212, 0x0E0E0E, 0x0B0B0B, 0x080808,
        0x3F0000, 0x3B0000, 0x380000, 0x350000, 0x320000, 0x2F0000, 0x2C0000, 0x290000,
        0x260000, 0x220000, 0x1F0000, 0x1C0000, 0x190000, 0x160000, 0x130000, 0x100000,
        0x3F3636, 0x3F2E2E, 0x3F2727, 0x3F1F1F, 0x3F1717, 0x3F1010, 0x3F0808, 0x3F0000,
        0x3F2A17, 0x3F2610, 0x3F2208, 0x3F1E00, 0x391B00, 0x331800, 0x2D1500, 0x271300,
        0x3F3F36, 0x3F3F2E, 0x3F3F27, 0x3F3F1F, 0x3F3E17, 0x3F3D10, 0x3F3D08, 0x3F3D00,
        0x393600, 0x333100, 0x2D2B00, 0x272700, 0x212100, 0x1C1B00, 0x161500, 0x101000,
        0x343F17, 0x313F10, 0x2D3F08, 0x283F00, 0x243900, 0x203300, 0x1D2D00, 0x182700,
        0x363F36, 0x2F3F2E, 0x273F27, 0x203F1F, 0x183F17, 0x103F10, 0x083F08, 0x003F00,
        0x003F00, 0x003B00, 0x003800, 0x003500, 0x013200, 0x012F00, 0x012C00, 0x012900,
        0x012600, 0x012200, 0x011F00, 0x011C00, 0x011900, 0x011600, 0x011300, 0x011000,
        0x363F3F, 0x2E3F3F, 0x273F3F, 0x1F3F3E, 0x173F3F, 0x103F3F, 0x083F3F, 0x003F3F,
        0x003939, 0x003333, 0x002D2D, 0x002727, 0x002121, 0x001C1C, 0x001616, 0x001010,
        0x172F3F, 0x102C3F, 0x082A3F, 0x00273F, 0x002339, 0x001F33, 0x001B2D, 0x001727,
        0x36363F, 0x2E2F3F, 0x27273F, 0x1F203F, 0x17183F, 0x10103F, 0x08093F, 0x00013F,
        0x00003F, 0x00003B, 0x000038, 0x000035, 0x000032, 0x00002F, 0x00002C, 0x000029,
        0x000026, 0x000022, 0x00001F, 0x00001C, 0x000019, 0x000016, 0x000013, 0x000010,
        0x0A0A0A, 0x3F380D, 0x3F3509, 0x3F3306, 0x3F3002, 0x3F2D00, 0x2D083F, 0x2A003F,
        0x260039, 0x200033, 0x1D002D, 0x180027, 0x140021, 0x11001C, 0x0D0016, 0x0A0010,
        0x3F363F, 0x3F2E3F, 0x3F273F, 0x3F1F3F, 0x3F173F, 0x3F103F, 0x3F083F, 0x3F003F,
        0x380039, 0x320033, 0x2D002D, 0x270027, 0x210021, 0x1B001C, 0x160016, 0x100010,
        0x3F3A37, 0x3F3834, 0x3F3631, 0x3F352F, 0x3F332C, 0x3F3129, 0x3F2F27, 0x3F2E24,
        0x3F2C20, 0x3F291C, 0x3F2718, 0x3C2517, 0x3A2316, 0x372215, 0x342014, 0x321F13,
        0x2F1E12, 0x2D1C11, 0x2A1A10, 0x28190F, 0x27180E, 0x24170D, 0x22160C, 0x20140B,
        0x1D130A, 0x1B1209, 0x171008, 0x150F07, 0x120E06, 0x100C06, 0x0E0B05, 0x0A0803,
        0x180019, 0x001919, 0x001818, 0x000007, 0x00000B, 0x0C0904, 0x120012, 0x140014,
        0x00000D, 0x070707, 0x131313, 0x171717, 0x101010, 0x0C0C0C, 0x0D0D0D, 0x363D3D,
        0x2E3A3A, 0x273737, 0x1D3232, 0x123030, 0x082D2D, 0x082C2C, 0x002929, 0x002626,
        0x002323, 0x002121, 0x001F1F, 0x001E1E, 0x001D1D, 0x001C1C, 0x001B1B, 0x260022
    };
}
